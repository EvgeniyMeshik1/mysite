{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const objectifySchema = schema => schema.reduce((acc, item) => {\n  if (item instanceof Array) {\n    if (item[1] instanceof Array) {\n      acc[item[0]] = [item[1], item[2]]\n    } else {\n      acc[item[0]] = [\n        [], item[1]\n      ]\n    }\n  } else {\n    acc[item] = [\n      []\n    ]\n  }\n  return acc\n}, {})\n\nexport function normaliz(data, {\n  entity,\n  from,\n  schema,\n  options = {}\n} = {}, entities = {}, clone = true) {\n  if (!data)\n    return data\n  if (clone)\n    data = JSON.parse(JSON.stringify(data))\n  if (!(schema instanceof Array))\n    throw new Error('Invalid schema - expecting an array. Got: ' + schema)\n  if (typeof entity !== 'string')\n    throw new Error('Invalid entity - expecting a string. Got: ' + entity)\n\n  const dataIsArray = Array.isArray(data)\n  if (!dataIsArray)\n    data = [data]\n\n  const collection = options.mapping || entity\n\n  entities = data.reduce((entities, item) => {\n    const id =\n      options.key ?\n      typeof options.key === 'function' ?\n      options.key(item) :\n      item[options.key] :\n      item.id\n\n    Object.entries(objectifySchema(schema)).forEach(([innerEntity, [innerSchema, innerOptions = {}]]) => {\n      let entityValue = item[innerEntity]\n      if (!entityValue)\n        return\n      let innerKeyId = innerOptions.key || 'id'\n      entities = normaliz(entityValue, {\n        entity: innerEntity,\n        schema: innerSchema,\n        options: innerOptions,\n      }, entities, false)\n      if (!(innerOptions.normalize === false)) {\n        if (Array.isArray(entityValue)) {\n          item[innerEntity] = entityValue.map(v =>\n            typeof innerKeyId === 'function' ? innerKeyId(v) : v[innerKeyId]\n          )\n        } else {\n          item[innerEntity] =\n            typeof innerKeyId === 'function' ? innerKeyId(entityValue) : entityValue[innerKeyId]\n        }\n      } else {\n        item[innerEntity] = entityValue\n      }\n    })\n\n    if (!(options.normalize === false)) {\n      if (!entities[collection])\n        entities[collection] = {}\n      entities[collection][id] = item\n      if (from) {\n        Object.entries(from).forEach(([fromEntity, fromId]) => {\n          if (!entities[fromEntity])\n            entities[fromEntity] = {}\n          if (!entities[fromEntity][fromId])\n            entities[fromEntity][fromId] = {}\n          if (dataIsArray) {\n            if (!entities[fromEntity][fromId][collection])\n              entities[fromEntity][fromId][collection] = []\n            entities[fromEntity][fromId][collection].push(id)\n          } else {\n            entities[fromEntity][fromId][collection] = id\n          }\n        })\n      }\n    }\n    return entities\n  }, entities)\n\n  return entities\n}\n\nexport function denormaliz(entity, {\n  entities,\n  schema,\n  options = {}\n} = {}, data = {}) {\n  if (!entity)\n    return entity\n  if (!(schema instanceof Array))\n    throw new Error('Invalid schema - expecting an array. Got: ' + schema)\n\n  Object.entries(objectifySchema(schema)).forEach(([innerEntity, [innerSchema, innerOptions = {}]]) => {\n    let entityValue = entity[innerEntity]\n    if (!entityValue)\n      return\n\n    const collection = innerOptions.mapping || innerEntity\n    const dontNormalize = innerOptions.normalize === false\n\n    const denormalize = entity => (\n      denormaliz(entity, {\n        entities,\n        schema: innerSchema,\n        options: innerOptions\n      })\n    )\n\n    entity[innerEntity] =\n      Array.isArray(entityValue) ?\n      entity[innerEntity].map(value => denormalize(dontNormalize ? value : entities[collection][value])) :\n      denormalize(dontNormalize ? entityValue : entities[collection][entityValue])\n  })\n\n  return JSON.parse(JSON.stringify(entity))\n}"],"names":["objectifySchema","schema","reduce","acc","item","Array","denormaliz","entity","entities","options","data","Error","Object","entries","forEach","innerEntity","innerSchema","innerOptions","entityValue","collection","mapping","dontNormalize","normalize","denormalize","isArray","map","value","JSON","parse","stringify","normaliz","from","clone","dataIsArray","id","key","innerKeyId","v","fromEntity","fromId","push"],"mappings":"gPAAA,MAAMA,EAAkBC,GAAUA,EAAOC,QAAO,CAACC,EAAKC,KAChDA,aAAgBC,MACdD,EAAK,aAAcC,MACrBF,EAAIC,EAAK,IAAM,CAACA,EAAK,GAAIA,EAAK,IAE9BD,EAAIC,EAAK,IAAM,CACb,GAAIA,EAAK,IAIbD,EAAIC,GAAQ,CACV,IAGGD,IACN,iBAiFI,SAASG,EAAWC,GAAQC,SACjCA,EAAQP,OACRA,EAAMQ,QACNA,EAAU,IACR,GAAIC,EAAO,IACb,IAAKH,EACH,OAAOA,EACT,KAAMN,aAAkBI,OACtB,MAAM,IAAIM,MAAM,6CAA+CV,GAwBjE,OAtBAW,OAAOC,QAAQb,EAAgBC,IAASa,SAAQ,EAAEC,GAAcC,EAAaC,EAAe,QAC1F,IAAIC,EAAcX,EAAOQ,GACzB,IAAKG,EACH,OAEF,MAAMC,EAAaF,EAAaG,SAAWL,EACrCM,GAA2C,IAA3BJ,EAAaK,UAE7BC,EAAchB,GAClBD,EAAWC,EAAQ,CACjBC,SAAAA,EACAP,OAAQe,EACRP,QAASQ,IAIbV,EAAOQ,GACLV,MAAMmB,QAAQN,GACdX,EAAOQ,GAAaU,KAAIC,GAASH,EAAYF,EAAgBK,EAAQlB,EAASW,GAAYO,MAC1FH,EAAYF,EAAgBH,EAAcV,EAASW,GAAYD,OAG5DS,KAAKC,MAAMD,KAAKE,UAAUtB,gBA/G5B,SAASuB,EAASpB,GAAMH,OAC7BA,EAAMwB,KACNA,EAAI9B,OACJA,EAAMQ,QACNA,EAAU,IACR,GAAID,EAAW,GAAIwB,GAAQ,GAC7B,IAAKtB,EACH,OAAOA,EAGT,GAFIsB,IACFtB,EAAOiB,KAAKC,MAAMD,KAAKE,UAAUnB,OAC7BT,aAAkBI,OACtB,MAAM,IAAIM,MAAM,6CAA+CV,GACjE,GAAsB,iBAAXM,EACT,MAAM,IAAII,MAAM,6CAA+CJ,GAEjE,MAAM0B,EAAc5B,MAAMmB,QAAQd,GAC7BuB,IACHvB,EAAO,CAACA,IAEV,MAAMS,EAAaV,EAAQW,SAAWb,EAyDtC,OAvDAC,EAAWE,EAAKR,QAAO,CAACM,EAAUJ,KAChC,MAAM8B,EACJzB,EAAQ0B,IACe,mBAAhB1B,EAAQ0B,IACf1B,EAAQ0B,IAAI/B,GACZA,EAAKK,EAAQ0B,KACb/B,EAAK8B,GA8CP,OA5CAtB,OAAOC,QAAQb,EAAgBC,IAASa,SAAQ,EAAEC,GAAcC,EAAaC,EAAe,QAC1F,IAAIC,EAAcd,EAAKW,GACvB,IAAKG,EACH,OACF,IAAIkB,EAAanB,EAAakB,KAAO,KACrC3B,EAAWsB,EAASZ,EAAa,CAC/BX,OAAQQ,EACRd,OAAQe,EACRP,QAASQ,GACRT,GAAU,IACoB,IAA3BS,EAAaK,UACbjB,MAAMmB,QAAQN,GAChBd,EAAKW,GAAeG,EAAYO,KAAIY,GACZ,mBAAfD,EAA4BA,EAAWC,GAAKA,EAAED,KAGvDhC,EAAKW,GACmB,mBAAfqB,EAA4BA,EAAWlB,GAAeA,EAAYkB,GAG7EhC,EAAKW,GAAeG,MAII,IAAtBT,EAAQa,YACPd,EAASW,KACZX,EAASW,GAAc,IACzBX,EAASW,GAAYe,GAAM9B,EACvB2B,GACFnB,OAAOC,QAAQkB,GAAMjB,SAAQ,EAAEwB,EAAYC,MACpC/B,EAAS8B,KACZ9B,EAAS8B,GAAc,IACpB9B,EAAS8B,GAAYC,KACxB/B,EAAS8B,GAAYC,GAAU,IAC7BN,GACGzB,EAAS8B,GAAYC,GAAQpB,KAChCX,EAAS8B,GAAYC,GAAQpB,GAAc,IAC7CX,EAAS8B,GAAYC,GAAQpB,GAAYqB,KAAKN,IAE9C1B,EAAS8B,GAAYC,GAAQpB,GAAce,MAK5C1B,IACNA"}